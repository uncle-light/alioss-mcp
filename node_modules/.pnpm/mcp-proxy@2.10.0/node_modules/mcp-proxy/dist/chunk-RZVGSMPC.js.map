{"version":3,"sources":["../src/proxyServer.ts","../src/startSSEServer.ts"],"sourcesContent":["import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport {\n  CallToolRequestSchema,\n  CompleteRequestSchema,\n  GetPromptRequestSchema,\n  ListPromptsRequestSchema,\n  ListResourcesRequestSchema,\n  ListResourceTemplatesRequestSchema,\n  ListToolsRequestSchema,\n  LoggingMessageNotificationSchema,\n  ReadResourceRequestSchema,\n  ServerCapabilities,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport { Client } from \"@modelcontextprotocol/sdk/client/index.js\";\n\nexport const proxyServer = async ({\n  server,\n  client,\n  serverCapabilities,\n}: {\n  server: Server;\n  client: Client;\n  serverCapabilities: ServerCapabilities;\n}) => {\n  if (serverCapabilities?.logging) {\n    server.setNotificationHandler(\n      LoggingMessageNotificationSchema,\n      async (args) => {\n        return client.notification(args);\n      },\n    );\n  }\n\n  if (serverCapabilities?.prompts) {\n    server.setRequestHandler(GetPromptRequestSchema, async (args) => {\n      return client.getPrompt(args.params);\n    });\n\n    server.setRequestHandler(ListPromptsRequestSchema, async (args) => {\n      return client.listPrompts(args.params);\n    });\n  }\n\n  if (serverCapabilities?.resources) {\n    server.setRequestHandler(ListResourcesRequestSchema, async (args) => {\n      return client.listResources(args.params);\n    });\n\n    server.setRequestHandler(\n      ListResourceTemplatesRequestSchema,\n      async (args) => {\n        return client.listResourceTemplates(args.params);\n      },\n    );\n\n    server.setRequestHandler(ReadResourceRequestSchema, async (args) => {\n      return client.readResource(args.params);\n    });\n  }\n\n  if (serverCapabilities?.tools) {\n    server.setRequestHandler(CallToolRequestSchema, async (args) => {\n      return client.callTool(args.params);\n    });\n\n    server.setRequestHandler(ListToolsRequestSchema, async (args) => {\n      return client.listTools(args.params);\n    });\n  }\n\n  server.setRequestHandler(CompleteRequestSchema, async (args) => {\n    return client.complete(args.params);\n  });\n};\n","import { SSEServerTransport } from \"@modelcontextprotocol/sdk/server/sse.js\";\nimport http from \"http\";\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\n\nexport type SSEServer = {\n  close: () => Promise<void>;\n};\n\ntype ServerLike = {\n  connect: Server[\"connect\"];\n  close: Server[\"close\"];\n};\n\nexport const startSSEServer = async <T extends ServerLike>({\n  port,\n  createServer,\n  endpoint,\n  onConnect,\n  onClose,\n}: {\n  port: number;\n  endpoint: string;\n  createServer: (request: http.IncomingMessage) => Promise<T>;\n  onConnect?: (server: T) => void;\n  onClose?: (server: T) => void;\n}): Promise<SSEServer> => {\n  const activeTransports: Record<string, SSEServerTransport> = {};\n\n  /**\n   * @author https://dev.classmethod.jp/articles/mcp-sse/\n   */\n  const httpServer = http.createServer(async (req, res) => {\n    if (req.headers.origin) {\n      try {\n        const origin = new URL(req.headers.origin);\n\n        res.setHeader(\"Access-Control-Allow-Origin\", origin.origin);\n        res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n        res.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n      } catch (error) {\n        console.error(\"Error parsing origin:\", error);\n      }\n    }\n\n    if (req.method === \"OPTIONS\") {\n      res.writeHead(204);\n      res.end();\n      return;\n    }\n\n    if (req.method === \"GET\" && req.url === `/ping`) {\n      res.writeHead(200).end(\"pong\");\n\n      return;\n    }\n\n    if (req.method === \"GET\" && req.url === endpoint) {\n      const transport = new SSEServerTransport(\"/messages\", res);\n\n      let server: T;\n\n      try {\n        server = await createServer(req);\n      } catch (error) {\n        if (error instanceof Response) {\n          res.writeHead(error.status).end(error.statusText);\n\n          return;\n        }\n\n        res.writeHead(500).end(\"Error creating server\");\n\n        return;\n      }\n\n      activeTransports[transport.sessionId] = transport;\n\n      let closed = false;\n\n      res.on(\"close\", async () => {\n        closed = true;\n\n        try {\n          await server.close();\n        } catch (error) {\n          console.error(\"Error closing server:\", error);\n        }\n\n        delete activeTransports[transport.sessionId];\n\n        onClose?.(server);\n      });\n\n      try {\n        await server.connect(transport);\n\n        await transport.send({\n          jsonrpc: \"2.0\",\n          method: \"sse/connection\",\n          params: { message: \"SSE Connection established\" },\n        });\n\n        onConnect?.(server);\n      } catch (error) {\n        if (!closed) {\n          console.error(\"Error connecting to server:\", error);\n\n          res.writeHead(500).end(\"Error connecting to server\");\n        }\n      }\n\n      return;\n    }\n\n    if (req.method === \"POST\" && req.url?.startsWith(\"/messages\")) {\n      const sessionId = new URL(\n        req.url,\n        \"https://example.com\",\n      ).searchParams.get(\"sessionId\");\n\n      if (!sessionId) {\n        res.writeHead(400).end(\"No sessionId\");\n\n        return;\n      }\n\n      const activeTransport: SSEServerTransport | undefined =\n        activeTransports[sessionId];\n\n      if (!activeTransport) {\n        res.writeHead(400).end(\"No active transport\");\n\n        return;\n      }\n\n      await activeTransport.handlePostMessage(req, res);\n\n      return;\n    }\n\n    res.writeHead(404).end();\n  });\n\n  await new Promise((resolve) => {\n    httpServer.listen(port, \"::\", () => {\n      resolve(undefined);\n    });\n  });\n\n  return {\n    close: async () => {\n      for (const transport of Object.values(activeTransports)) {\n        await transport.close();\n      }\n\n      return new Promise((resolve, reject) => {\n        httpServer.close((error) => {\n          if (error) {\n            reject(error);\n\n            return;\n          }\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n"],"mappings":"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","names":[]}